<?xml version="1.0" encoding="UTF-8" ?>
<EventGhost Version="0.5.0-rc6" Guid="{003C1510-8181-41B4-854D-7B9A3555F0BC}" Time="1727778793.37">
    <Autostart Name="Autostart" XML_Guid="{2FB4C05C-8F5A-4AFA-BBAD-524F0FE39C67}" />
    <Macro Name="AutoMailBatteryLOW" XML_Guid="{F5A6868F-92A2-4179-A8B9-1557D2FC1915}" Expanded="True">
        <Event Name="System.BatteryLevel.20%" XML_Guid="{27379400-41F4-4E64-9C52-81082C70ED4B}" />
        <Event Name="System.BatteryLevel.15%" XML_Guid="{27379400-41F4-4E64-9C52-81082C70ED4B}" />
        <Event Name="System.BatteryLevel.10%" XML_Guid="{27379400-41F4-4E64-9C52-81082C70ED4B}" />
        <Event Name="System.BatteryLevel.5%" XML_Guid="{8262247A-4029-46A0-B878-E426A931003D}" />
        <Event Name="System.BatteryLevel.1%" XML_Guid="{8262247A-4029-46A0-B878-E426A931003D}" />
        <Action XML_Guid="{F67007AB-0D18-4D5E-BE26-3E277444E773}">
            EventGhost.PythonScript(u'import os\nimport subprocess\nimport eg\n\n# Function to find the OneDrive path\ndef find_onedrive_path():\n    onedrive_path = os.getenv(\'OneDrive\')  # Personal OneDrive\n    if not onedrive_path:\n        onedrive_path = os.getenv(\'OneDriveCommercial\')  # Commercial OneDrive\n    if not onedrive_path:\n        # If neither environment variable is set, try to get it from the registry (Windows only)\n        try:\n            import _winreg as winreg  # Use _winreg for Python 2.7\n            with winreg.OpenKey(winreg.HKEY_CURRENT_USER, r"Software\\Microsoft\\OneDrive") as key:\n                onedrive_path = winreg.QueryValueEx(key, "UserFolder")[0]\n        except Exception as e:\n            eg.Print("Failed to find OneDrive path in registry: {0}".format(str(e)))\n    return onedrive_path\n\n# Log a message to EventGhost log\neg.Print("Starting the script...")\n\n# Expand the USERPROFILE environment variable for default Desktop paths\ndefault_desktop_path = os.path.expandvars(r"%USERPROFILE%\\Desktop")\neg.Print("Default Desktop path: {0}".format(default_desktop_path))\n\n# Attempt to find the OneDrive path\nonedrive_path = find_onedrive_path()\nonedrive_desktop_path = os.path.join(onedrive_path, "Desktop") if onedrive_path else None\neg.Print("OneDrive Desktop path: {0}".format(onedrive_desktop_path))\n\n# Check which desktop path exists\ndesktop_path = None\nif os.path.exists(default_desktop_path):\n    desktop_path = default_desktop_path\n    eg.Print("Default Desktop path found: {0}".format(desktop_path))\nelif onedrive_desktop_path and os.path.exists(onedrive_desktop_path):\n    desktop_path = onedrive_desktop_path\n    eg.Print("OneDrive Desktop path found: {0}".format(desktop_path))\nelse:\n    eg.Print("Neither default nor OneDrive Desktop paths found.")\n\n# Write the desktop path to \'source_path.txt\' in the \'GAUTOCHARGER\' folder on the desktop\nif desktop_path:\n    gautocharger_folder = os.path.join(desktop_path, "GAUTOCHARGER")\n    \n    # Create the \'GAUTOCHARGER\' folder if it doesn\'t exist\n    if not os.path.exists(gautocharger_folder):\n        os.makedirs(gautocharger_folder)\n    \n    # Define the path for the source_path.txt file inside the GAUTOCHARGER folder\n    source_path_file = os.path.join(gautocharger_folder, "source_path.txt")\n    \n    # Write the desktop path to the file\n    with open(source_path_file, "w") as f:\n        f.write(desktop_path)\n    \n    # Print confirmation\n    eg.Print("Desktop path written to: {0}".format(source_path_file))\nelse:\n    eg.Print("No valid desktop path found to write to source_path.txt.")\n\n# Proceed if desktop path is found\nif desktop_path:\n    # Define the script path\n    script_path = os.path.join(desktop_path, "GAUTOCHARGER", "PCBatteryLOW.py")\n    eg.Print("Script path: {0}".format(script_path))\n\n    # Define the log file path (in the same directory as the script)\n    log_file_path = os.path.join(os.path.dirname(script_path), "script_log.txt")\n    eg.Print("Log file path: {0}".format(log_file_path))\n\n    # Check if the script exists\n    if os.path.exists(script_path):\n        eg.Print("Executing script: {0}".format(script_path))\n        \n        # Expand the USERPROFILE for the Python executable path\n        python_path = os.path.expandvars(r"%USERPROFILE%\\AppData\\Local\\Programs\\Python\\Python311\\pythonw.exe")\n        eg.Print("Python path: {0}".format(python_path))\n        \n        # Check and print the current working directory\n        current_working_dir = os.getcwd()\n        eg.Print("Current Working Directory: {0}".format(current_working_dir))\n        \n        # Call the Python script and capture the output\n        try:\n            with open(log_file_path, "w") as log_file:\n                result = subprocess.call([python_path, script_path], stdout=log_file, stderr=subprocess.STDOUT)\n                # Map the result code to "SUCCESS" if 0, otherwise keep the result code\n                result_message = "SUCCESS" if result == 0 else "Error code: {0}".format(result)\n                eg.Print("Subprocess result: " + result_message)\n        except Exception as e:\n            eg.Print("An error occurred: {0}".format(str(e)))\n    else:\n        eg.Print("Script path could not be found.")\nelse:\n    eg.Print("Cannot proceed because no desktop path was found.")')
        </Action>
    </Macro>
    <Macro Name="AutoMailBatteryGOOD" XML_Guid="{F5A6868F-92A2-4179-A8B9-1557D2FC1915}" Expanded="True">
        <Event Name="System.BatteryLevel.100%" XML_Guid="{7E4D7451-7080-4F89-8E63-1166DE5F24A5}" />
        <Event Name="System.BatteryLevel.95%" XML_Guid="{27379400-41F4-4E64-9C52-81082C70ED4B}" />
        <Event Name="System.BatteryLevel.90%" XML_Guid="{27379400-41F4-4E64-9C52-81082C70ED4B}" />
        <Action XML_Guid="{F67007AB-0D18-4D5E-BE26-3E277444E773}">
            EventGhost.PythonScript(u'import os\nimport subprocess\nimport eg\n\n# Function to find the OneDrive path\ndef find_onedrive_path():\n    onedrive_path = os.getenv(\'OneDrive\')  # Personal OneDrive\n    if not onedrive_path:\n        onedrive_path = os.getenv(\'OneDriveCommercial\')  # Commercial OneDrive\n    if not onedrive_path:\n        # If neither environment variable is set, try to get it from the registry (Windows only)\n        try:\n            import _winreg as winreg  # Use _winreg for Python 2.7\n            with winreg.OpenKey(winreg.HKEY_CURRENT_USER, r"Software\\Microsoft\\OneDrive") as key:\n                onedrive_path = winreg.QueryValueEx(key, "UserFolder")[0]\n        except Exception as e:\n            eg.Print("Failed to find OneDrive path in registry: {0}".format(str(e)))\n    return onedrive_path\n\n# Log a message to EventGhost log\neg.Print("Starting the script...")\n\n# Expand the USERPROFILE environment variable for default Desktop paths\ndefault_desktop_path = os.path.expandvars(r"%USERPROFILE%\\Desktop")\neg.Print("Default Desktop path: {0}".format(default_desktop_path))\n\n# Attempt to find the OneDrive path\nonedrive_path = find_onedrive_path()\nonedrive_desktop_path = os.path.join(onedrive_path, "Desktop") if onedrive_path else None\neg.Print("OneDrive Desktop path: {0}".format(onedrive_desktop_path))\n\n# Check which desktop path exists\ndesktop_path = None\nif os.path.exists(default_desktop_path):\n    desktop_path = default_desktop_path\n    eg.Print("Default Desktop path found: {0}".format(desktop_path))\nelif onedrive_desktop_path and os.path.exists(onedrive_desktop_path):\n    desktop_path = onedrive_desktop_path\n    eg.Print("OneDrive Desktop path found: {0}".format(desktop_path))\nelse:\n    eg.Print("Neither default nor OneDrive Desktop paths found.")\n\n# Write the desktop path to \'source_path.txt\' in the \'GAUTOCHARGER\' folder on the desktop\nif desktop_path:\n    gautocharger_folder = os.path.join(desktop_path, "GAUTOCHARGER")\n    \n    # Create the \'GAUTOCHARGER\' folder if it doesn\'t exist\n    if not os.path.exists(gautocharger_folder):\n        os.makedirs(gautocharger_folder)\n    \n    # Define the path for the source_path.txt file inside the GAUTOCHARGER folder\n    source_path_file = os.path.join(gautocharger_folder, "source_path.txt")\n    \n    # Write the desktop path to the file\n    with open(source_path_file, "w") as f:\n        f.write(desktop_path)\n    \n    # Print confirmation\n    eg.Print("Desktop path written to: {0}".format(source_path_file))\nelse:\n    eg.Print("No valid desktop path found to write to source_path.txt.")\n\n# Proceed if desktop path is found\nif desktop_path:\n    # Define the script path\n    script_path = os.path.join(desktop_path, "GAUTOCHARGER", "PCBatteryGOOD.py")\n    eg.Print("Script path: {0}".format(script_path))\n\n    # Define the log file path (in the same directory as the script)\n    log_file_path = os.path.join(os.path.dirname(script_path), "script_log.txt")\n    eg.Print("Log file path: {0}".format(log_file_path))\n\n    # Check if the script exists\n    if os.path.exists(script_path):\n        eg.Print("Executing script: {0}".format(script_path))\n        \n        # Expand the USERPROFILE for the Python executable path\n        python_path = os.path.expandvars(r"%USERPROFILE%\\AppData\\Local\\Programs\\Python\\Python311\\pythonw.exe")\n        eg.Print("Python path: {0}".format(python_path))\n        \n        # Check and print the current working directory\n        current_working_dir = os.getcwd()\n        eg.Print("Current Working Directory: {0}".format(current_working_dir))\n        \n        # Call the Python script and capture the output\n        try:\n            with open(log_file_path, "w") as log_file:\n                result = subprocess.call([python_path, script_path], stdout=log_file, stderr=subprocess.STDOUT)\n                # Map the result code to "SUCCESS" if 0, otherwise keep the result code\n                result_message = "SUCCESS" if result == 0 else "Error code: {0}".format(result)\n                eg.Print("Subprocess result: " + result_message)\n        except Exception as e:\n            eg.Print("An error occurred: {0}".format(str(e)))\n    else:\n        eg.Print("Script path could not be found.")\nelse:\n    eg.Print("Cannot proceed because no desktop path was found.")\n')
        </Action>
    </Macro>
</EventGhost>
